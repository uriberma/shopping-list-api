name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'
  POSTGRES_VERSION: '15'

jobs:
  # Job 1: Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Tidy dependencies
        run: go mod tidy

      - name: Format check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted properly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Vet
        run: go vet ./...

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.54.2

      - name: Run golangci-lint
        run: |
          # Run golangci-lint and capture results
          if golangci-lint run --timeout=5m --out-format=json > lint-results.json 2>&1; then
            echo "LINT_STATUS=passing" >> $GITHUB_ENV
            echo "LINT_COLOR=brightgreen" >> $GITHUB_ENV
            echo "LINT_GRADE=A+" >> $GITHUB_ENV
          else
            # Check if there are any issues
            ISSUES=$(cat lint-results.json | jq -r '.Issues | length' 2>/dev/null || echo "unknown")
            if [[ "$ISSUES" == "0" ]] || [[ "$ISSUES" == "null" ]]; then
              echo "LINT_STATUS=passing" >> $GITHUB_ENV
              echo "LINT_COLOR=brightgreen" >> $GITHUB_ENV
              echo "LINT_GRADE=A+" >> $GITHUB_ENV
            else
              echo "LINT_STATUS=issues" >> $GITHUB_ENV
              echo "LINT_COLOR=orange" >> $GITHUB_ENV
              echo "LINT_GRADE=B" >> $GITHUB_ENV
            fi
          fi

      - name: Check for vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # Job 2: Build and Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: shopping_list_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Set up test database
        env:
          PGPASSWORD: password
        run: |
          psql -h localhost -U postgres -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";" shopping_list_db_test

      - name: Build application
        run: |
          echo "Building server..."
          go build -v -o bin/server ./cmd/server
          echo "Building migrator..."
          go build -v -o bin/migrator ./cmd/migrator

      - name: Run tests with coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: password
          DB_NAME: shopping_list_db_test
          DB_SSLMODE: disable
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out

      - name: Generate coverage badge
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Coverage: $COVERAGE%"
          
          # Determine badge color based on coverage
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
            COLOR="yellow"
          elif (( $(echo "$COVERAGE >= 40" | bc -l) )); then
            COLOR="orange"
          else
            COLOR="red"
          fi
          
          # Create coverage badge URL
          BADGE_URL="https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}"
          echo "COVERAGE_BADGE_URL=$BADGE_URL" >> $GITHUB_ENV
          echo "COVERAGE_PERCENT=$COVERAGE" >> $GITHUB_ENV

      - name: Display badge information
        run: |
          echo "üìä Badge Information:"
          echo "Coverage: ${COVERAGE_PERCENT:-0}% (${COVERAGE_BADGE_URL:-N/A})"
          echo "Code Quality: ${LINT_GRADE:-Unknown} (https://img.shields.io/badge/go%20report-${LINT_GRADE:-Unknown}-${LINT_COLOR:-gray})"
          echo "Build Status: Available at https://github.com/uriberma/go-shopping-list-api/actions/workflows/ci.yml/badge.svg"
          echo "Go Version: 1.24 (https://img.shields.io/badge/go-1.24-blue)"
          echo ""
          echo "üí° To update README badges manually, use these URLs:"
          echo "Coverage: ${COVERAGE_BADGE_URL:-https://img.shields.io/badge/coverage-0%25-red}"
          echo "Quality: https://img.shields.io/badge/go%20report-${LINT_GRADE:-A+}-${LINT_COLOR:-brightgreen}"
          
          # Create badge data file for potential future automation
          cat > badge-data.json << EOF
          {
            "coverage": "${COVERAGE_PERCENT:-0}",
            "coverage_url": "${COVERAGE_BADGE_URL:-https://img.shields.io/badge/coverage-0%25-red}",
            "quality_grade": "${LINT_GRADE:-A+}",
            "quality_url": "https://img.shields.io/badge/go%20report-${LINT_GRADE:-A+}-${LINT_COLOR:-brightgreen}",
            "build_url": "https://github.com/uriberma/go-shopping-list-api/actions/workflows/ci.yml/badge.svg",
            "go_version_url": "https://img.shields.io/badge/go-1.24-blue"
          }
          EOF

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html

      - name: Test build artifacts
        run: |
          echo "Testing server binary..."
          ./bin/server --help || echo "Server binary built successfully"
          echo "Testing migrator binary..."
          ./bin/migrator --help || echo "Migrator binary built successfully"

  # Job 3: Integration Tests (Optional - for future expansion)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: shopping_list_db_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Set up integration test database
        env:
          PGPASSWORD: password
        run: |
          psql -h localhost -U postgres -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";" shopping_list_db_integration

      - name: Run integration tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: password
          DB_NAME: shopping_list_db_integration
          DB_SSLMODE: disable
        run: |
          echo "Setting up integration test environment..."
          echo "Integration tests would run here (placeholder for future implementation)"
          # Future: Add actual integration tests that test the full API

  # Job 4: Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Build & Test: ${{ needs.build-and-test.result }}"
          
          if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "‚úÖ All checks passed!"
            exit 0
          else
            echo "‚ùå Some checks failed!"
            exit 1
          fi
